
group "couch-potato-backend"
version "1.0-SNAPSHOT"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
  dependencies {
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
      classpath "com.moowork.gradle:gradle-node-plugin:0.12"
  }
}

apply plugin: 'kotlin2js'
apply plugin: "com.moowork.node"

repositories {
    jcenter()
    mavenCentral()
    maven{ url "https://dl.bintray.com/kotlin/kotlinx"}
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js"
}


task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include "*.js" }
    }

    into "${buildDir}/node_modules"
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, npmInstall]) {
    script = file("node_modules/mocha/bin/mocha")
    args = ["${buildDir}/node_modules/test_index.js", "--exit"]
}

test.dependsOn runMocha

compileKotlin2Js.kotlinOptions {
  moduleKind = "commonjs"
  outputFile = "${buildDir}/node_modules/index.js"
}

compileTestKotlin2Js.kotlinOptions {
    outputFile = "${buildDir}/node_modules/test_index.js"
    moduleKind = "commonjs"
}

node{
    version = "10.9.0"
    npmVersion = "4.0.0"
    download = true
}


build.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${buildDir}/node_modules"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }
    copy {
        from sourceSets.main.resources.srcDirs
        into "${buildDir}/node_modules"
    }
}


task myScript(type: NodeTask) {
  script = file("${buildDir}/node_modules/index.js")
}

task run{
  dependsOn myScript
}

task stage(dependsOn: ["build", "clean"])
build.mustRunAfter clean

