

buildscript {

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven{ url "https://kotlin.bintray.com/kotlin-js-wrappers" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.37"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
    }
}

apply plugin: "com.moowork.node"
apply plugin: 'kotlin2js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlinx-serialization'

repositories {
    jcenter()
    mavenCentral()
    maven{
            url "https://kotlin.bintray.com/kotlin-js-wrappers"
        }
    maven{ url "https://dl.bintray.com/kotlin/kotlinx"}
}

dependencies {
    def kotlinx_html_version = "0.6.11"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains:kotlin-extensions:1.0.1-pre.49-kotlin-1.2.60"
    compile "org.jetbrains:kotlin-react:16.4.2-pre.49-kotlin-1.2.60"
    compile "org.jetbrains:kotlin-react-dom:16.4.2-pre.49-kotlin-1.2.60"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:${kotlinx_html_version}"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.6.0"
    testCompile "org.jetbrains.kotlin:kotlin-test-js"
}

task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || 
                    !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${projectDir}/web"

    dependsOn classes
}

assemble.dependsOn assembleWeb
/*
task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, assembleWeb]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha*/

compileKotlin2Js {
    kotlinOptions.outputFile = "${projectDir}/web/output.js"
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.sourceMap = true
    kotlinOptions.main = "call"
}
/*
compileTestKotlin2Js {
    kotlinOptions.outputFile = "${projectDir}/test/output.js"
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.sourceMap = true
    kotlinOptions.main = "call"
}*/


kotlinFrontend {
    sourceMaps = true
    npm {
        dependency("core-js")
        dependency("react")
        dependency("react-dom")
        dependency("react-router")
        dependency("jquery")
        dependency("react-markdown")
        //devDependency("mocha")
        //devDependency("chai")
        // devDependency "qunit"
        // devDependency "karma-webpack"
        
    }
    /* karma {
        enableWebPack = true
        preprocessors = ["webpack"]
        plugins = ["karma-webpack", "karma-phantomjs-launcher", "karma-junit-reporter", "karma-qunit"]
    }*/
    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
        mode = 'development'
        proxyUrl = "http://localhost:3000"
    }
}


